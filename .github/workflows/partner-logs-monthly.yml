name: Partner Logs to Monthly Sheets

on:
  # DST-safe: 07:10 Europe/Rome is 05:10 UTC in summer, 06:10 UTC in winter
  schedule:
    - cron: "10 5 * * *"
    - cron: "10 6 * * *"
  workflow_dispatch:
    inputs:
      date:
        description: "YYYY-MM-DD (optional; defaults to yesterday Europe/Rome)"
        required: false

concurrency:
  group: partner-logs-monthly
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Rome
      # OLD app for Drive + mapping (listLogs/getLogsBatch/getLogIDs/upsertLogIDs)
      WEBAPP_URL: ${{ secrets.WEBAPP_URL }}
      # NEW writer app (creates monthly file + writes YYYY-MM-DD tab)
      LOGS_WRITER_URL: ${{ secrets.LOGS_WRITER_URL }}
      LOGS_SHEETS_ROOT: Logs-Sheets
      CLEAR_FIRST: "1"      # clear daily tab before writing
      UPSERT_CHUNK: "80"    # fewer calls to Apps Script

      # Portal creds for the collector (must exist as secrets)
      PORTAL_LOGIN_URL: ${{ secrets.PORTAL_LOGIN_URL }}
      PORTAL_FEEDS_URL: ${{ secrets.PORTAL_FEEDS_URL }}
      PORTAL_USER:      ${{ secrets.PORTAL_USER }}
      PORTAL_PASS:      ${{ secrets.PORTAL_PASS }}
      WAIT_TIMEOUT: "45"
      BETWEEN_STEPS_S: "0.3"
      SHOW_PROGRESS: "1"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Gate so we only run around 07:10 Europe/Rome on scheduled triggers
      - name: Gate to ~07:00 Europe/Rome on schedule
        id: gate
        if: ${{ github.event_name == 'schedule' }}
        run: |
          hour=$(TZ=Europe/Rome date +%H)
          if [ "$hour" = "07" ]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
            echo "Not ~07:00 Europe/Rome (hour=$hour). Skipping."
          fi

      - name: Install dependencies
        if: ${{ github.event_name == 'workflow_dispatch' || steps.gate.outputs.run == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Install Chrome for the Selenium-based collector
      - name: Setup Chrome
        if: ${{ github.event_name == 'workflow_dispatch' || steps.gate.outputs.run == 'true' }}
        uses: browser-actions/setup-chrome@v1

      # Optional: set date from manual input so summarizer can use LOGS_DATE
      - name: Set date if provided (manual)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.date != '' }}
        run: echo "LOGS_DATE=${{ github.event.inputs.date }}" >> $GITHUB_ENV

      # 1) Refresh the FeedID â†’ Partner map
      - name: Collect LogIDs (Active partners)
        if: ${{ github.event_name == 'workflow_dispatch' || steps.gate.outputs.run == 'true' }}
        run: python collect_log_ids.py
        # If the portal is occasionally down, you can allow the run to continue:
        # continue-on-error: true

      # 2) Write per-partner daily tab to the monthly sheet
      - name: Summarize per-partner (defaults to yesterday if LOGS_DATE not set)
        if: ${{ github.event_name == 'workflow_dispatch' || steps.gate.outputs.run == 'true' }}
        run: python summarize_log_counts_by_partner.py
